#!/usr/bin/env node

const fs = require('fs');
const shell = require('shelljs');
const readline = require('readline');
const semver = require('semver');

const pkgPath = process.cwd() + '/package.json';
if (!fs.existsSync(pkgPath)) {
    console.error('[ERROR] Not a npm package');
    console.error('Please locate into a npm package directory.');
    process.exit();
}
const pkg = require(pkgPath);

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<version>')
    .parse(process.argv);

const version = semver.clean(program.args[0] || pkg.version);
if (!semver) {
    console.error('[ERROR] invalid version');
    process.exit();
}

/**
 * 接收输入
 */
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
rl.prompt();

rl.question(`
The new version is "${version}".
----------------------------------------
Are you sure to continue? (yes/no) `, (answer) => {
    rl.close();
    answer = answer.toLowerCase();
    if (!(answer === 'yes' || answer === 'y'))
        return;

    pkg.version = version;
    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n', 'utf-8');

    const tagm = version.match(/-(\w+)\.?/);
    process.exit(shell.exec([
        `git add package.json`,
        `git commit -m ":bookmark: Publish v${version}"`,
        `npm publish` + (tagm ? ' --tag ' + tagm[1] : ''),
        `git push`,
        `git tag v${version}`,
        `git push origin v${version}`,
    ].join(' && ')).code);
});
