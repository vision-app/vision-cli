#!/usr/bin/env node

const checker = require('../lib/checker');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .option('-c, --config-path <path>', 'Vusion config path')
    .option('-e, --entry-path <path>', 'Change default entry path')
    .option('--global-css <path>', 'Custom global CSS path')
    .option('-o, --output <path>', 'Output files path')
    .option('-t, --theme <theme>', 'Choose theme')
    .option('-C, --no-clean', 'Not clean output files at start')
    .option('-l, --library-path <path>', 'Library entry path. To be `./index.js` by default if project type is `library`')
    .option('-s, --source-map', 'Generate source map in build mode')
    .option('-v, --verbose', 'Show more information')
    .option('--uglify-js', 'Compress and mangle JS by UglifyjsWebpackPlugin in build mode')
    .option('--minify-js', 'Minify JS only in `build` mode. Set `true` or `babel-minify` to use BabelBabelMinifyWebpackPlugin, set `uglify-js` to use UglifyjsWebpackPlugin as same as `--uglify`')
    .parse(process.argv);

global.extraArgs = program.args;
/**
 * Execute Task
 */
require('../lib/register');
process.env.NODE_ENV = 'production';
const config = global.vusionConfig = require('../config/resolve')(program.configPath, {
    globalCSSPath: program.globalCss,
    outputPath: program.output,
    entry: program.entryPath,
});

if (!checker.checkNode() || !checker.checkVersion(config.version))
    process.exit(1);
checker.checkUpgrade();

if (program.entryPath)
    config.webpack.entry = { bundle: program.entryPath };
if (program.hasOwnProperty('theme'))
    config.theme = program.theme;
if (program.hasOwnProperty('clean'))
    config.clean = program.clean;
if (program.hasOwnProperty('sourceMap'))
    config.sourceMap = program.sourceMap;
if (program.hasOwnProperty('verbose'))
    config.verbose = program.verbose;
if (program.hasOwnProperty('uglifyJs'))
    config.uglifyJS = program.uglifyJs;
if (program.hasOwnProperty('minifyJs'))
    config.minifyJS = program.minifyJs;

const compiler = require('../lib/build')(require('../webpack/' + config.type));
compiler.run();
